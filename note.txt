> new folder
> new venv
> new git reop
> new django project
> Dockerfile
> docker-compose.yml file
> .dockerignore file
> build docker image and run container
> docker-compose up -d --build
> switch to postgresql from sqlite
> add accounts app
> add custom user model
> update settings.py installed_apps and AUTH_USER_MODEL
> make migrations with app name specified
> docker-compose exec web python manage.py makemigrations accounts
> migrate
> create custom forms
> update admin in accounts
> create a superuser
> docker-compose exec web python manage.py createsuperuser
> admin-admin@email.com-1
> adding pages app (to hold homepage and about page)
> docker-compose exec web python manage.py startapp pages
> add templates directory
> update templates config var in settings.py (DIRS)
> add base and home templates
> if settings.py is changed, docker must be restarted
> docker-compose down
> docker-compose up -d
> tests were added
> adding user registration (login, logout, signup)
> include builtin auth urls in main urls.py
> add registration folder to templates
> add login and signup templates to registration templates folder
> login and logout only require templates
> signup requires a view and route as well
> add login and logout redirect urls to settings.py
> add signup view to accounts/views and a route in accounts/urls
> add another route to main urls for accounts app urls
> there will bo two routes with accounts/ in main urls.py file now
> add signup template to registration templates folder
> adding static assets
> create 4 folders (static, inside it js, css, images)
> add base.css, base.js and .keep to all (.keep to images)
> add staticfiles_dirs to settings.py
> add style link to base html
> add some basic css to test it
> add load static tag to base and other html tags
> do the same for js
> add static_root to settings.py
> explicitly add staticfiles_storage to settings.py
> run collectstatic command
> docker-compose exec web python manage.py collectstatic
> add bootstrap
> note: (link to bootstrap files in base will come before our own css and js files)
> add about page to pages app
> add django cripsy forms and crispy bootstrap5 and its two config vars
> add load cripsy form tags to base and other template
> update forms in templates with |crispy filter
> adding django-allauth
> requires three apps to be added to installed_apps
> django.contrib.sites, allauth and allauth.account
> also add site_id=1 to settings.py
> explicitly adding the authentication backend (which django uses by default)
> django-allauth requires its own authentication backend to be added to settings.py
> we need to change the default email backend from smtp to console backend
> add email backend to settings.py
> add account logout redirect to settings.py
> run migrate command (no makemigrations)
> this led to error: django.core.exceptions.ImproperlyConfigured: allauth.account.middleware.AccountMiddleware must be added to settings.MIDDLEWARE
> i will add it to middlewares, but this may result in further errors
> (added it to the bottom of middleware config var)
> trying to run migrate again...
> docker-compose exec web python manage.py migrate
> migrate command ran with no errors... (yet to be tested)
> main urls.py needs to be updated
> replace built-in auth app with allauth
> also the url route for accounts app needs to be deleted
> since we will be using allauth's tempaltes and routes
> allauth needs tempaltes to exist in tempaltes/account directory
> so, mkdir tempaltes/account
> now, copy existing login and signup html files to account directory
> (mv command can be used here)
> at this point, accounts/views and urls.py file can be deleted (but i won't)
> also, the entire registration directory can be deleted
> (rm -r command can be used here)
> now base.html needs to be udpated, to use allauth urls
> in base.html, add account_ prefix to login, logout and signup
> done, check out the homepage, and the login page
> allauth provides many configurations, (you should see the remember me box in login page)
> we can set this to be true, so the user will not need to login again (always remember)
> add ACCOUNT_SESSION_REMEMBER = True to settings.py
> this config var can have three values (none, False, True)
> none (default) will ask the user if they want to be remembered
> if set true, and refresh the login page, remember me box will be gone
> to customize the logout page, add a logout.html to tempaltes/account directory
> test the new logout page
> now, we are going to customize the signup page to only ask for password once
> add ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False to settings.py
> test the signup page by registering a new user
> testuser1, testuser1@email.com, testpass123
> upon registeration, an email will be sent to console, to view this:
> docker-compose logs
> now to customize the login page, to only ask for email/password instead of...
> username/email/password
> four new configs need to be added to settings.py
> test the signup
> testuser2@email.com, testpass123
> allauth will use the part before @ in email as username (check this in admin)
> (in case of something like, testuser2@email and testuser2@example.com)...
> allauth will automatically add a small random number to the second user
> Chapter 9: Environment Variables
> adding environment variables
> add env to settings.py (top right after imports)
> environment vars will be added to docker-compose.yml
> container needs to be restarted for this
> secret was moved to docker-compose.yml
> in production environment, we will have a docker-compose-production.yml
> that must be immediately added to gitignore
> allowed_hosts updated, and debug set to False
> debug var updated, restart container
> databases updated, dj-database-url package needed
> small problem, heroku itself will create database_url (i just added the one book said)
> Chapter 10: Email
> configuring email system
> overriding allauth's built-in templates
> we will achieve this by creating the same directory in allauth's source code
> templates/account/email
> two files were added
> sites in admin page was edited
> one config var added to settings.py file
> Email confirmation page cannot be found. I have no choice but to skip this chapter
> and come back with my own project and latest version of all packages
> chapter 11: Books app
> create a new app called books
> add it to installed_apps
> added model
> time for running migrations (make first) and then migrate
> update books/amdin.py
> mistake in naming model (named it Books instead of Book)
> changed it back to Book
> ran makemigrations
> django is able to detect rename, and will ask it model was renamed?
> entered yes, and ran migrate again
> migrate command was applied, everything seems ok
> added a sample book in admin interface
> modified model display in admin.py 
> added urls, views and tempalate for books app (simple list view to list books)
> updatd book model to use uuid instead of simple ids in urls
> this was to address multiple securty issues
> by using the ids in urls, hackers will be able to know exactly how many records
> are there in our database
> tests were added as well
> Chapter 12: Reviews app
> adding a review model to books/models.py (later in a dedicated reviews app)
> NOTE: django's default ForeignKey field is set to one-to-many
> model was added, makemigrations books, and run migrate
> update books/admin.py to display reviews
> add two sample review to a book
> udpate the template (book_detail.html) to display the reviews
> Chapter 13: File/Image Uploads
> django refers to anything uploaded by users, as media (not static)
> to handle this feature, python image processing library (pillow) must be installed
> using wsl, downloaded pillow (for linux) and installed it offline