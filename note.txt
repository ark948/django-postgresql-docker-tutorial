> new folder
> new venv
> new git repo
> new django project
> Dockerfile
> docker-compose.yml file
> .dockerignore file
> build docker image and run container
> docker-compose up -d --build
> switch to postgresql from sqlite
> add accounts app
> add custom user model
> update settings.py installed_apps and AUTH_USER_MODEL
> make migrations with app name specified
> docker-compose exec web python manage.py makemigrations accounts
> migrate
> create custom forms
> update admin in accounts
> create a superuser
> docker-compose exec web python manage.py createsuperuser
> admin-admin@email.com-1
> adding pages app (to hold homepage and about page)
> docker-compose exec web python manage.py startapp pages
> add templates directory
> update templates config var in settings.py (DIRS)
> add base and home templates
> if settings.py is changed, docker must be restarted
> docker-compose down
> docker-compose up -d
> tests were added
> adding user registration (login, logout, signup)
> include builtin auth urls in main urls.py
> add registration folder to templates
> add login and signup templates to registration templates folder
> login and logout only require templates
> signup requires a view and route as well
> add login and logout redirect urls to settings.py
> add signup view to accounts/views and a route in accounts/urls
> add another route to main urls for accounts app urls
> there will bo two routes with accounts/ in main urls.py file now
> add signup template to registration templates folder
> adding static assets
> create 4 folders (static, inside it js, css, images)
> add base.css, base.js and .keep to all (.keep to images)
> add staticfiles_dirs to settings.py
> add style link to base html
> add some basic css to test it
> add load static tag to base and other html tags
> do the same for js
> add static_root to settings.py
> explicitly add staticfiles_storage to settings.py
> run collectstatic command
> docker-compose exec web python manage.py collectstatic
> add bootstrap
> note: (link to bootstrap files in base will come before our own css and js files)
> add about page to pages app
> add django cripsy forms and crispy bootstrap5 and its two config vars
> add load cripsy form tags to base and other template
> update forms in templates with |crispy filter
> adding django-allauth
> requires three apps to be added to installed_apps
> django.contrib.sites, allauth and allauth.account
> also add site_id=1 to settings.py
> explicitly adding the authentication backend (which django uses by default)
> django-allauth requires its own authentication backend to be added to settings.py
> we need to change the default email backend from smtp to console backend
> add email backend to settings.py
> add account logout redirect to settings.py
> run migrate command (no makemigrations)
> this led to error: django.core.exceptions.ImproperlyConfigured: allauth.account.middleware.AccountMiddleware must be added to settings.MIDDLEWARE
> i will add it to middlewares, but this may result in further errors
> (added it to the bottom of middleware config var)
> trying to run migrate again...
> docker-compose exec web python manage.py migrate
> migrate command ran with no errors... (yet to be tested)
> main urls.py needs to be updated
> replace built-in auth app with allauth
> also the url route for accounts app needs to be deleted
> since we will be using allauth's tempaltes and routes
> allauth needs tempaltes to exist in tempaltes/account directory
> so, mkdir tempaltes/account
> now, copy existing login and signup html files to account directory
> (mv command can be used here)
> at this point, accounts/views and urls.py file can be deleted (but i won't)
> also, the entire registration directory can be deleted
> (rm -r command can be used here)
> now base.html needs to be udpated, to use allauth urls
> in base.html, add account_ prefix to login, logout and signup
> done, check out the homepage, and the login page
> allauth provides many configurations, (you should see the remember me box in login page)
> we can set this to be true, so the user will not need to login again (always remember)
> add ACCOUNT_SESSION_REMEMBER = True to settings.py
> this config var can have three values (none, False, True)
> none (default) will ask the user if they want to be remembered
> if set true, and refresh the login page, remember me box will be gone
> to customize the logout page, add a logout.html to tempaltes/account directory
> test the new logout page
> now, we are going to customize the signup page to only ask for password once
> add ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False to settings.py
> test the signup page by registering a new user
> testuser1, testuser1@email.com, testpass123
> upon registeration, an email will be sent to console, to view this:
> docker-compose logs
> now to customize the login page, to only ask for email/password instead of...
> username/email/password
> four new configs need to be added to settings.py
> test the signup
> testuser2@email.com, testpass123
> allauth will use the part before @ in email as username (check this in admin)
> (in case of something like, testuser2@email and testuser2@example.com)...
> allauth will automatically add a small random number to the second user
> Chapter 9: Environment Variables
> adding environment variables
> add env to settings.py (top right after imports)
> environment vars will be added to docker-compose.yml
> container needs to be restarted for this
> secret was moved to docker-compose.yml
> in production environment, we will have a docker-compose-production.yml
> that must be immediately added to gitignore
> allowed_hosts updated, and debug set to False
> debug var updated, restart container
> databases updated, dj-database-url package needed
> small problem, heroku itself will create database_url (i just added the one book said)
> Chapter 10: Email
> configuring email system
> overriding allauth's built-in templates
> we will achieve this by creating the same directory in allauth's source code
> templates/account/email
> two files were added
> sites in admin page was edited
> one config var added to settings.py file
> Email confirmation page cannot be found. I have no choice but to skip this chapter
> and come back with my own project and latest version of all packages
> chapter 11: Books app
> create a new app called books
> add it to installed_apps
> added model
> time for running migrations (make first) and then migrate
> update books/amdin.py
> mistake in naming model (named it Books instead of Book)
> changed it back to Book
> ran makemigrations
> django is able to detect rename, and will ask it model was renamed?
> entered yes, and ran migrate again
> migrate command was applied, everything seems ok
> added a sample book in admin interface
> modified model display in admin.py 
> added urls, views and tempalate for books app (simple list view to list books)
> updatd book model to use uuid instead of simple ids in urls
> this was to address multiple securty issues
> by using the ids in urls, hackers will be able to know exactly how many records
> are there in our database
> tests were added as well
> Chapter 12: Reviews app
> adding a review model to books/models.py (later in a dedicated reviews app)
> NOTE: django's default ForeignKey field is set to one-to-many
> model was added, makemigrations books, and run migrate
> update books/admin.py to display reviews
> add two sample review to a book
> udpate the template (book_detail.html) to display the reviews
> Chapter 13: File/Image Uploads
> django refers to anything uploaded by users, as media (not static)
> to handle this feature, python image processing library (pillow) must be installed
> using wsl, downloaded pillow (for linux) and installed it offline
> the difference between static and media is that static can be trusted
> need to address security concerns of accepting user uploaded content
> two new media related configs must be added to settings.py
> MEDIA_ROOT absolute file system path for user uploaded files
> MEDIA_URL is the url we can use in templates for the files
> add them both after staticfiles_storage
> add a new directory called media, and a 'covers' directory within it
> main urls.py needs to be updated, since media will exist in production environment
> import settings and static in main urls.py (to server the media files)
> now books/models.py needs to be updated to store related images
> in this case the cover for each book
> we will use ImageField for this (FileField can be used for other file formats)
> (ImageField only allows image formats)
> making migrations now will result in error
> right now, cover field is not nullable, but we already have some book records...
> in database, django needs something to populate these existing records
> to fix this, we add a blank=True to cover field
> blank and null are commonly used together (IMPORTANT)
> now make migrations books and apply
> use the admin interface to add a cover to an existing record
> update template to display it book_detail.html
> Chapter 14: Permissions
> protecting book views with login
> login mixins come before generic views in inheritance
> not all mixins and generic views can be used together
> edit books/views.py
> import LoginRequiredMixin and add them to book list view and detail view
> create a user called special (by admin interface)
> added a custom permission (to book model) called special_status
> so authors can read all books
> make new migration and run
> now we will add this custom permission to special user
> navigate to users section in admin panel, find the special user
> bottom of the page, use the permissions section to find the special status permission
> find books | book | Can read all book (found a typo here, book should be books)
> select it, and add to the right pane, save
> last step is to apply the custom permission
> in books/views.py, first import PermissionRequiredMixin
> add it to detail view after login mixin and before detail view mixin (order is important)
> then add permission_required field to detail view
> now test with testuser and specialuser to see the difference
> Groups and UserPassesTestMixin (left for reader to explore) IMPORTANT
> books tests needs to be updated

> Chapter 15: Search
> add a url, view and template for it
> implementing the filtering logic (there are different methods)
> Basic filtering or QuerySet
> this can be done by modifying the queryset of listview (using a manager)
> e.g. adding contains (case sensitive) or icontains (not case sensitive)
> for basic filtering, contains, icontains, filter, all, get or exclude will be enough
> there is aslo QuerySet API
> another more advanced option is Q Objects
> they can be used to chain different filters together
> adding search form to base template (at the end of nav tag)
> update the queryset of search result list view using Q Objects

> Chapter 16: Performance
> download and install djang-debug-toolbar
> 3 configs must be added
> first add debug toolbar to installed_apps
> second, add it to middlewares
> third, we need to add the INTERNAL_IPS
> since we are using docker, this config requires additional steps
> add the sockerio code at the bottom of the settings.py file
> main urls also needs to be updated (debug toolbar must obly appear if debug is true)
> navigate to home page, toolbar should appear
> one important (and first) step of imporving performance is reducing database queries IMPORTANT
> Django ORM has two methods to help us with that
> select_related and prefetch_related
> having one complex query is better than having multiple small ones
> to examine the querysets we can use python shell (this process is important for professional developers)
> docker-compose exec web python manage.py shell
> to access a book instance, we can't use id (since we are using UUIDs)
> instead use contains
> pros = Book.objects.get(title__contains="Professionals")
> pros.reviews.all()
> update the book detail view to use prefetch_related
> by doing so, system will not make a separate query for each review
> indexing is another method for improving performance
> indexing creates a separate data structure for a column (typically ids)
> downside is that indexes require additional space
> update the book model to add an index
> create migration and apply it
> next method, is caching
> django has its own caching system that gives us four different options
> the per-site cache, per-view cache, template fragment caching, low-level cache api
> per-site caching (caches the entire site) is the simplest approach
> to add per-site caching, add two middlewares to middleware config var (one at the beginning, one at bottom)
> and three new config vars
> the cache_middleware_seconds could be changed for more heavier websites with content rapidly changing
> for more advanced approach, a dedicated caching server is required such as Redis and Memcached
> test if project works fine (restart server)
> another step is front-end assets
> css and js files can become large, django-compressor package can be used to minimize them
> media files should be used with CDN, and thumbnails also can be used

> Chapter 17: Security
> Django 4.2 LTS is supported until April 2026
> there is a command to check if a django project is production ready, provided by system check framework of django
> docker-compose exec web python manage.py check --deploy
> add docker-compose-prod.yml and immediately add it to gitginore file
> this file will be production specific docker-compose file
> copy the content of docker-compose.yml into it
> bring containers down: cmd> docker-compose down
> bring them back up using the production specific docker compose file:
> cmd> docker-compose -f docker-compose-prod.yml up -d
> in docker-compose-prod.yml:
> change DJANGO_DEBUG to False
> restart the container (using prod format)
> visit a non-existent page, you should see a generic 404 not found error page, nothing more
> run django deployment checklist command again, there should 1 less issue now (now 5)
> add a default value to DEBUG in settings.py:
> DEBUG = env.bool("DJANGO_DEBUG", default=False)
> it's good practice to always default to the safest scenario
> now remove the DJANGO_DEBUG from docker compose prod file (no longer need it since we add default)
> restart the container (prod format)
> another issue is the secret key
> generate a safe key using the following command:
> docker-compose exec web python -c "import secrets; print(secrets.token_urlsafe(38))"
> (if the generated key contains a '$' dollar sign, add an additional dollar sign to it, because of docker)
> copy the generated key and replace it with the current value of DJANGO_SECRET_KEY
> restart container (prod format)
> run deployment checklist again
> should be 4 issues now
> common web security stuff:
> SQL incjection: Django ORM sanitizes user inputs, but also provides option for raw queries, use extreme caution
> XSS (Cross site scripting): Django templates automatically escapes specific characters
> if autoescape off option is required, use extreme caution
> CSRF or Cross site request forgery: Django CSRF middleware add csrf protection, allows for customization
> extreme caution
> Clickjacking: Django Clickjacking middleware offers protection, use caution
> HTTPS/SSL
> all modern websites should use ssl
> http (which is the backbone of the modern web) has no encryption by default
> SSL, and its successor TLS add encryption to HTTP, making it HTTPS
> add DJANGO_SECURE_SSL_REDIRECT to settings.py
> in production this has to be true, in development its ok for it to be false
> add "DJANGO_SECURE_SSL_REDIRECT=False" to docker-compose.yml (yes the older docker-compose one)
> this will make it so, that if prod compose file is not present, it will default to True (which is secure)
> run deployment checklist
> there should be 3 issues
> now if you start the server and visit the home page, there will be an error
> django dev server only supports http not https
> companies usually have three different environment set up, one for local, one for production...
> and one for staging server that mimics production but allows for more actual testing
> the staging server is often deployed but with a hidden url, so only the developer team can try it out
> going forwared if want to test the local project with prod settings, django secure ssl redirect must be off
> restart container (old format)
> browsers often cache ssl, so you might have to clear it
> HTTP strict transport security (HSTS): basically enforce web browsers to only interact with https
> three configs vars: in settings.py, all of them begin with secure_hsts
> also add them to docker-compose.yml
> restart containers (prod format) and run deployment checklist again
> should be only 2 left
> cookies are used to store information on client's computer
> http is stateless by design, no way to tell if user is authenticatd other than including an idnetifier in header
> django uses sessions and cookies for this
> cookies should also be forced over https with session cookie secure config var
> by default, it is false for local dev, should be true for prod
> same is true for csrf_cookie_secure
> add the two to the bottom of the settings.py file
> udpate docker-compose.yml
> restart containers
$ docker-compose down
$ docker-compose -f docker-compose-prod.yml up -d
$ docker-compose exec web python manage.py check --deploy
> there should be no issues
> another step to secure the project is Admin Hardening
> the default admin url is just localhost/admin, which is dangerous
> changing this address to literally anything else makes it more secure
> open up main urls.py file and change it to something else